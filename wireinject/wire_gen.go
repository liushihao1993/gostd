// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wireinject

import (
	"github.com/vito-go/gostd"
	"github.com/vito-go/gostd/conf"
	"github.com/vito-go/gostd/http-service"
	"github.com/vito-go/gostd/http-service/handler/express"
	"github.com/vito-go/gostd/http-service/handler/user"
	"github.com/vito-go/gostd/internal/conn"
	"github.com/vito-go/gostd/internal/data/dao"
	"github.com/vito-go/gostd/internal/data/dao/helloblog-dao"
	"github.com/vito-go/gostd/internal/data/repo/student"
	"github.com/vito-go/gostd/rpc-service"
	"github.com/vito-go/gostd/rpc-service/gorpc"
)

// Injectors from wire.go:

func InitAppBlog(cfg *conf.Cfg) (*gostd.AppBlog, error) {
	client, err := conn.NewUserRpcCli(cfg)
	if err != nil {
		return nil, err
	}
	getUserInfo := user.NewGetUserInfo(client)
	userUser := user.NewUser(getUserInfo)
	getPackage := express.NewGetPackage()
	expressExpress := express.NewExpress(getPackage)
	server := httpserver.NewServer(cfg, userUser, expressExpress)
	appBlog := gostd.NewAppBlog(cfg, server)
	return appBlog, nil
}

func InitAppUser(cfg *conf.Cfg) (*gostd.AppUser, error) {
	db, err := dao.NewHelloBlogDB(cfg)
	if err != nil {
		return nil, err
	}
	userInfoDao := helloblogdao.NewUserInfoDao(db)
	helloblogdaoDao := helloblogdao.NewDao(cfg, userInfoDao)
	userInfo := student.NewUserInfo(helloblogdaoDao)
	client := student.NewClient(userInfo)
	gorpcUser := gorpc.NewUser(client)
	register := &rpcsrv.Register{
		User: gorpcUser,
	}
	server := rpcsrv.NewServer(cfg, register)
	appUser := gostd.NewAppUser(cfg, server)
	return appUser, nil
}
